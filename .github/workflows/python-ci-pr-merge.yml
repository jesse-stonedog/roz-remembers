name: Python CI & Auto PR to Main

on:
  push:
    branches:
      - dev # This workflow runs when changes are pushed to the 'dev' branch

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest # Use a standard Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch the 'dev' branch to build and test
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or any specific Python version your project requires (e.g., '3.9', '3.11')
          cache: 'poetry' # Cache Poetry dependencies for faster installs

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies with Poetry
        run: poetry install --no-root # Install dependencies, but not the project itself yet (as it's in 'dev')

      - name: Install project in editable mode
        run: poetry install --sync # Install the project in editable mode for testing

      - name: Run tests with pytest
        run: poetry run pytest # Execute your tests using Poetry's run command
        env:
          PYTHONPATH: ${{ github.workspace }}/roz_remembers # Adjust if your main code is in a different directory (e.g., just `.` if tests are at root)
          # Add any other environment variables your tests might need here
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If your tests need a token, though usually not for unit tests

  create_pr_and_merge:
    name: Create PR & Merge to Main
    runs-on: ubuntu-latest
    needs: build_and_test # This job will only run if the 'build_and_test' job passes
    if: success() # Ensure this job only runs if the previous job succeeded

    steps:
      - name: Checkout code (for PR creation)
        uses: actions/checkout@v4
        with:
          # Fetch 'dev' branch as the source for the PR
          ref: dev
          fetch-depth: 0 # Fetch all history for proper PR creation
          # Important: Use a PAT for PR creation and merging
          # The default GITHUB_TOKEN doesn't have merge permissions on protected branches
          token: ${{ secrets.GH_ACTIONS_PAT }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if PR already exists
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          # Use GitHub CLI to check for existing PRs from 'dev' to 'main'
          PR_EXISTS=$(gh pr list --base main --head dev --json number --jq '.[0].number' || echo "")
          echo "Existing PR: $PR_EXISTS"
          echo "PR_NUMBER=$PR_EXISTS" >> "$GITHUB_OUTPUT"

      - name: Create or update Pull Request
        id: create_pull_request
        if: steps.check_pr.outputs.PR_NUMBER == '' # Only create PR if one doesn't exist
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_ACTIONS_PAT }} # Use the PAT for creating the PR
          commit-message: 'Merge dev into main after successful CI'
          title: 'Automated: Merge dev into main'
          body: |
            This is an automated pull request to merge changes from `dev` into `main` after all CI tests passed.
          branch: dev # Source branch
          base: main # Target branch
          delete-branch: false # Do not delete 'dev' after merging
          add-paths: '.' # Include all changes from 'dev'

      - name: Determine PR number for merging
        id: get_pr_number
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          if [ "${{ steps.check_pr.outputs.PR_NUMBER }}" != "" ]; then
            echo "PR_NUMBER=${{ steps.check_pr.outputs.PR_NUMBER }}" >> "$GITHUB_OUTPUT"
          else
            # If a new PR was just created, get its number
            PR_NUMBER=$(gh pr list --base main --head dev --json number --jq '.[0].number' || echo "")
            echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          fi

      - name: Enable auto-merge on the Pull Request
        if: steps.get_pr_number.outputs.PR_NUMBER != ''
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_NUMBER=${{ steps.get_pr_number.outputs.PR_NUMBER }}
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number found, skipping auto-merge."
            exit 0
          fi
          echo "Attempting to enable auto-merge for PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --auto --merge # Use --auto for auto-merge, --merge for merge commit
          echo "Auto-merge command executed for PR #$PR_NUMBER"
        # It's important to understand the merge strategy:
        # --auto: Enables auto-merge (PR will merge when all checks pass)
        # --merge: Use a merge commit (default)
        # --squash: Use a squash commit
        # --rebase: Use a rebase merge

      - name: Close the Pull Request (if merged successfully)
        # This step will only run if the auto-merge successfully closes the PR
        # due to the 'needs' and 'if' conditions. However, the `gh pr merge --auto`
        # command might not immediately close it. This step is more for a final check.
        # It's often better to rely on the auto-merge behavior.
        # This step might be redundant if --auto works as expected.
        if: success() && steps.get_pr_number.outputs.PR_NUMBER != ''
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_NUMBER=${{ steps.get_pr_number.outputs.PR_NUMBER }}
          echo "Checking if PR #$PR_NUMBER is closed..."
          PR_STATE=$(gh pr view $PR_NUMBER --json state --jq '.state')
          if [ "$PR_STATE" = "MERGED" ] || [ "$PR_STATE" = "CLOSED" ]; then
            echo "PR #$PR_NUMBER is already merged or closed."
          else
            echo "PR #$PR_NUMBER is still open. Attempting to close (if not merged by auto-merge)."
            # This is generally not needed if auto-merge is configured correctly and passes
            # gh pr close $PR_NUMBER --comment "Automatically closed after merge by GitHub Actions."
            echo "If the PR didn't merge due to remaining checks, it will remain open."
          fi