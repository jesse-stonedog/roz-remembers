name: Python CI & Auto PR to Main

on:
  push:
    branches:
      - dev # This workflow runs when changes are pushed to the 'dev' branch

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest # Use a standard Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch the 'dev' branch to build and test
          ref: ${{ github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or any specific Python version your project requires (e.g., '3.9', '3.11')

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true 

      - name: Configure Poetry for PATH
        run: |
          echo "POETRY_HOME=$(poetry env info -p)/bin" >> $GITHUB_ENV
          echo "$(poetry env info -p)/bin" >> $GITHUB_PATH
      - name: Set PYTHONPATH for src directory
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
      
      - name: Install project in editable mode
        run: poetry install --with dev # with dev installs development dependencies

      - name: Run tests with pytest
        run: PYTHONPATH=src poetry run pytest # Execute your tests using Poetry's run command

  create_pr_and_merge:
    name: Create PR & Merge to Main
    runs-on: ubuntu-latest
    needs: build_and_test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch the 'dev' branch initially as the working branch
          ref: dev
          # Fetch full history for accurate diffing between any branches
          fetch-depth: 0 
          # Ensure a token is available for fetching other branches (though checkout@v4 usually has it by default)
          token: ${{ secrets.GITHUB_TOKEN }} # Use default GITHUB_TOKEN for checkout

      - name: Fetch main branch for comparison
        run: |
          git remote set-url origin https://github.com/${{ github.repository }}
          git fetch origin main:main # Explicitly fetch origin/main into local main, or just fetch origin main
          git branch -r # Optional: inspect remote branches to confirm origin/main is there
          git log origin/main --oneline -5 # Optional: check latest commits on origin/main

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for differences between dev and main (Bulletproof)
        id: check_diff
        run: |
          # Fetch all remote refs again to ensure they are absolutely fresh
          git fetch origin

          # Get the full SHA for both remote branches
          DEV_SHA=$(git rev-parse origin/dev)
          MAIN_SHA=$(git rev-parse origin/main)

          echo "DEBUG: Remote origin/dev SHA: $DEV_SHA"
          echo "DEBUG: Remote origin/main SHA: $MAIN_SHA"

          # Check if dev is an ancestor of main (meaning main contains all of dev's commits)
          # git merge-base finds the common ancestor. If it's dev_sha, then dev is fully merged into main.
          if [ "$(git merge-base "$DEV_SHA" "$MAIN_SHA")" = "$DEV_SHA" ]; then
            echo "::notice::Branch 'dev' is an ancestor of 'main' or identical to it. All dev's commits are already in main."
            echo "needs_pr=false" >> $GITHUB_OUTPUT
          else
            # Also check if main is an ancestor of dev (meaning dev contains all of main's commits)
            if [ "$(git merge-base "$MAIN_SHA" "$DEV_SHA")" = "$MAIN_SHA" ]; then
              echo "::notice::Branch 'main' is an ancestor of 'dev'. Dev contains new commits."
              # Show the actual diff to confirm what Git sees
              echo "--- Actual diff (commits unique to dev since last common ancestor) ---"
              git log --oneline "$MAIN_SHA".."$DEV_SHA"
              echo "--- End Actual diff ---"
              echo "needs_pr=true" >> "$GITHUB_OUTPUT"
            else
              echo "::notice::Branches 'dev' and 'main' have diverged with unique commits on both sides."
              echo "needs_pr=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Check if PR already exists (only if diff exists)
        id: check_pr
        if: steps.check_diff.outputs.needs_pr == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          # Use GitHub CLI to check for existing PRs from 'dev' to 'main'
          PR_EXISTS=$(gh pr list --base main --head dev --json number --jq '.[0].number' || echo "")
          echo "Existing PR: $PR_EXISTS"
          echo "PR_NUMBER=$PR_EXISTS" >> "$GITHUB_OUTPUT"

      - name: Create or update Pull Request
        id: create_pull_request
        # Only run if a PR is needed AND one doesn't already exist (based on check_pr's output)
        if: steps.check_diff.outputs.needs_pr == 'true' && steps.check_pr.outputs.PR_NUMBER == ''
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_ACTIONS_PAT }}
          commit-message: 'Merge dev into main after successful CI'
          title: 'Automated: Merge dev into main'
          body: |
            This is an automated pull request to merge changes from `dev` into `main` after all CI tests passed.
          branch: dev # Source branch
          base: main # Target branch
          delete-branch: false
          add-paths: '.' # Include all changes from 'dev'
          rebase-merge: false

      - name: Determine PR number for merging
        id: get_pr_number
        if: steps.check_diff.outputs.needs_pr == 'true' # Only attempt to get PR number if a diff exists
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_NUMBER=""
          # If a new PR was created by peter-evans/create-pull-request
          if [ "${{ steps.create_pull_request.outputs.pull-request-number }}" != "" ]; then
            PR_NUMBER="${{ steps.create_pull_request.outputs.pull-request-number }}"
          # If an existing PR was found by check_pr
          elif [ "${{ steps.check_pr.outputs.PR_NUMBER }}" != "" ]; then
            PR_NUMBER="${{ steps.check_pr.outputs.PR_NUMBER }}"
          fi
          echo "Determined PR_NUMBER: $PR_NUMBER"
          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Enable auto-merge on the Pull Request
        if: steps.get_pr_number.outputs.PR_NUMBER != '' # Only run if a PR number was successfully determined
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_NUMBER=${{ steps.get_pr_number.outputs.PR_NUMBER }}
          echo "Attempting to enable auto-merge for PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --auto --merge # Using --auto as suggested to enable auto-merge
          echo "Auto-merge command executed for PR #$PR_NUMBER"

      - name: Close the Pull Request (if merged successfully)
        if: success() && steps.get_pr_number.outputs.PR_NUMBER != ''
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_NUMBER=${{ steps.get_pr_number.outputs.PR_NUMBER }}
          echo "Checking if PR #$PR_NUMBER is closed..."
          PR_STATE=$(gh pr view $PR_NUMBER --json state --jq '.state')
          if [ "$PR_STATE" = "MERGED" ] || [ "$PR_STATE" = "CLOSED" ]; then
            echo "PR #$PR_NUMBER is already merged or closed."
          else
            echo "PR #$PR_NUMBER is still open. Auto-merge might be pending or failed."
          fi