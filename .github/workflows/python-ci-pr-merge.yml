name: Python CI & Auto PR to Main

on:
  push:
    branches:
      - dev # This workflow runs when changes are pushed to the 'dev' branch

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest # Use a standard Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch the 'dev' branch to build and test
          ref: ${{ github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or any specific Python version your project requires (e.g., '3.9', '3.11')

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true 

      - name: Configure Poetry for PATH
        run: |
          echo "POETRY_HOME=$(poetry env info -p)/bin" >> $GITHUB_ENV
          echo "$(poetry env info -p)/bin" >> $GITHUB_PATH
      - name: Set PYTHONPATH for src directory
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
      
      - name: Install project in editable mode
        run: poetry install --with dev # with dev installs development dependencies

      - name: Run tests with pytest
        run: PYTHONPATH=src poetry run pytest # Execute your tests using Poetry's run command

  create_pr_and_merge:
    name: Create PR & Merge to Main
    runs-on: ubuntu-latest
    needs: build_and_test
    if: success() # Only run if the build_and_test job passed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0 
          token: ${{ secrets.GH_ACTIONS_PAT }} 

      - name: Fetch and ensure main is up-to-date
        run: |
          git remote set-url origin https://github.com/${{ github.repository }}
          git fetch origin main # Fetch main branch from origin
          git branch -f main origin/main 

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for differences between dev and main (Bulletproof)
        id: check_diff
        run: |
          DEV_SHA=$(git rev-parse origin/dev)
          MAIN_SHA=$(git rev-parse origin/main)

          echo "DEBUG: Remote origin/dev SHA: $DEV_SHA"
          echo "DEBUG: Remote origin/main SHA: $MAIN_SHA"

          # Check if dev is ahead of main (meaning main's HEAD is an ancestor of dev's HEAD)
          if [ "$(git merge-base "$MAIN_SHA" "$DEV_SHA")" = "$MAIN_SHA" ]; then
            # If main is an ancestor of dev, then dev has commits main doesn't have
            NUM_COMMITS_AHEAD=$(git rev-list --right-only --count "$MAIN_SHA".."$DEV_SHA")
            if [ "$NUM_COMMITS_AHEAD" -gt 0 ]; then
              echo "::notice::Branch 'dev' is ahead of 'main' by $NUM_COMMITS_AHEAD commits. PR needed."
              echo "needs_pr=true" >> "$GITHUB_OUTPUT"
            else
              # This case handles if main is an ancestor of dev but there are no new commits (e.g. empty commit or already merged)
              echo "::notice::Branch 'dev' is a descendant of 'main' but has no new content. No PR needed."
              echo "needs_pr=false" >> "$GITHUB_OUTPUT"
            fi
          else
            # If dev is an ancestor of main OR they have diverged (both have unique commits)
            # In this workflow, if dev is an ancestor of main, it means main already merged dev.
            echo "::notice::Branch 'dev' is not ahead of 'main' with new commits (it might be an ancestor or diverged)."
            echo "needs_pr=false" >> "$GITHUB_OUTPUT"
          fi
        # Add a default output to needs_pr if the if/else conditions don't set it (safety)
        # This can happen if the script exits early or if the branch comparison logic is complex.
        # You might not strictly need this if your logic covers all paths, but it's good practice.
        # This will be automatically set by `echo "needs_pr=true/false" >> $GITHUB_OUTPUT`

      - name: Create Pull Request (using gh CLI)
        if: steps.check_diff.outputs.needs_pr == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_TITLE="Automated: Merge dev into main"
          PR_BODY="This is an automated pull request to merge changes from \`dev\` into \`main\` after all CI tests passed."
          PR_EXISTS=$(gh pr list --base main --head dev --json number --jq '.[0].number' || echo "")

          if [ -z "$PR_EXISTS" ]; then
            echo "No existing PR found. Creating new PR from dev to main."
            NEW_PR_URL=$(gh pr create --base main --head dev --title "$PR_TITLE" --body "$PR_BODY" --draft --repo ${{ github.repository }})
            echo "New PR created: $NEW_PR_URL"
            # Extract PR number from URL
            PR_NUMBER=$(echo "$NEW_PR_URL" | sed -n 's/.*pull\/\([0-9]*\).*/\1/p')
            echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          else
            echo "Existing PR #$PR_EXISTS found. Will try to update or enable auto-merge."
            echo "PR_NUMBER=$PR_EXISTS" >> "$GITHUB_OUTPUT"
            # Optional: You can add gh pr edit or gh pr ready if it's a draft
            # gh pr edit "$PR_EXISTS" --title "$PR_TITLE" --body "$PR_BODY"
          fi

      - name: Enable auto-merge on the Pull Request
        if: steps.create_pull_request.outputs.PR_NUMBER != '' # Only run if a PR number was successfully determined
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_NUMBER=${{ steps.create_pull_request.outputs.PR_NUMBER }}
          echo "Attempting to enable auto-merge for PR #$PR_NUMBER"
          gh pr merge "$PR_NUMBER" --auto --merge --repo ${{ github.repository }}
          echo "Auto-merge command executed for PR #$PR_NUMBER"

      - name: Close the Pull Request (if merged successfully)
        # This is primarily for logging/cleanup if you need explicit closing logic.
        # gh pr merge --auto should handle the closing when it successfully merges.
        if: success() && steps.create_pull_request.outputs.PR_NUMBER != ''
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
        run: |
          PR_NUMBER=${{ steps.create_pull_request.outputs.PR_NUMBER }}
          echo "Checking if PR #$PR_NUMBER is closed..."
          PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq '.state' --repo ${{ github.repository }})
          if [ "$PR_STATE" = "MERGED" ] || [ "$PR_STATE" = "CLOSED" ]; then
            echo "PR #$PR_NUMBER is already merged or closed."
          else
            echo "PR #$PR_NUMBER is still open. Auto-merge might be pending or failed."
          fi